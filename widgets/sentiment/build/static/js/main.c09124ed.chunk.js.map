{"version":3,"sources":["Themes.js","Chart.js","Monday.js","App.js","serviceWorker.js","index.js"],"names":["themes","light","color","background","red","yellow","green","dark","Object","assign","colorblind","colorblindDark","ThemeContext","React","createContext","Container","styled","div","props","size","theme","PieChart","figure","FlavorText","TextTransition","ChartTitle","getFlavor","data","timerInt","average","positive","calculated","total","negative","toFixed","newText","Chart","useState","undefined","hover","setHover","flavorText","setFlavorText","timer","setTimer","setTimerInt","useContext","resetFlavorText","setInterval","prev","createFlavorText","type","clearTimeout","text","percent","neutral","useEffect","title","width","height","viewBox","className","cx","cy","r","fill","onMouseEnter","onMouseLeave","pointerEvents","stroke","strokeWidth","strokeDasharray","strokeDashoffset","x","y","dy","dx","getCenter","monday","mondaySdk","column","maxEntries","id","setSentimentColumn","e","integrateRight","min","max","a","j","Math","z","calc","d","res","integrateLeft","calculate","sentiment","Number","parseFloat","onDataChange","cb","query","api","boardData","items","boards","colValues","map","i","column_values","length","slice","columnIndex","values","push","value","replace","final","App","window","innerHeight","chartSize","setChartSize","boardTitle","setBoardTitle","setTheme","setData","dataChange","settings","keys","sentimentColumn","execute","listen","boardId","console","log","onDataAdd","titleChange","boardIds","board","name","onBoardChange","listener","innerWidth","addEventListener","removeEventListener","Provider","style","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c09124ed.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const themes = {\r\n    light: {\r\n        color: '#323338',\r\n        background: '#ffffff',\r\n        red: '#E44258',\r\n        yellow: '#FFCB00',\r\n        green: '#00CA72',\r\n    },\r\n}\r\n\r\nthemes.dark = Object.assign({}, themes.light, {\r\n    background: '#323338',\r\n    color: 'rgba(255, 255, 255, 0.8)',\r\n    red: '#E45266',\r\n    green: '#14CA7B',\r\n    yellow: '#FFD01A',\r\n})\r\n\r\nthemes.colorblind = Object.assign({}, themes.light, {\r\n    green: '#9AADBD',\r\n    yellow: '#FFADAD',\r\n    red: '#784BD1',\r\n})\r\n\r\nthemes.colorblindDark = Object.assign({}, themes.dark, {\r\n    green: '#9AADBD',\r\n    yellow: '#FFADAD',\r\n    red: '#7c57c7',\r\n})\r\n\r\nexport const ThemeContext = React.createContext(themes.light)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport TextTransition from 'react-text-transition'\r\nimport { ThemeContext } from './Themes'\r\n\r\nconst Container = styled.div`\r\n    text-align: center;\r\n    width: ${(props) => props.size}px;\r\n    height: ${(props) => props.size}px;\r\n    background: ${(props) => props.theme.background};\r\n    color: ${(props) => props.theme.color};\r\n`\r\n\r\nconst PieChart = styled.figure`\r\n    border-radius: 50%;\r\n    margin: 0 auto;\r\n    position: relative;\r\n    svg .donut-segment {\r\n        cursor: pointer;\r\n        transition: 0.3s all;\r\n    }\r\n    .chart-text {\r\n        font-size: 16px;\r\n        fill: #000;\r\n        transform: translateY(0.25em);\r\n    }\r\n\r\n    .chart-number {\r\n        font-size: 13px;\r\n        line-height: 1;\r\n        text-anchor: middle;\r\n        transform-origin: center;\r\n        transform: translate(4px, -5px) rotate(90deg) scaleY(-120%);\r\n    }\r\n`\r\n\r\nconst FlavorText = styled(TextTransition)`\r\n    font-size: calc(16px + (40 - 16) * ((100vh - 300px) / (1600 - 300)));\r\n    margin: calc(16px + (40 - 16) * ((100vh - 300px) / (1600 - 300)));\r\n    .text-transition_inner {\r\n        text-align: center;\r\n        display: flex;\r\n        justify-content: space-around;\r\n    }\r\n`\r\n\r\nconst ChartTitle = styled.div`\r\n    margin: calc(24px + (48 - 24) * ((100vh - 300px) / (1600 - 300)));\r\n    font-size: calc(24px + (48 - 24) * ((100vh - 300px) / (1600 - 300)));\r\n`\r\n\r\nfunction getCenter(data) {\r\n    // ;-D :-D ;-) :-) :-| :-/  :-( :'(\r\n    if (!data) {\r\n        return ':-0'\r\n    }\r\n\r\n    const average =\r\n        ((data.positive.calculated * 10) / data.total -\r\n            (data.negative.calculated * 10) / data.total +\r\n            100) /\r\n        200\r\n    if (average < 0.05) {\r\n        return '>:('\r\n    } else if (average < 0.15) {\r\n        return `:'(`\r\n    } else if (average < 0.25) {\r\n        return ':-('\r\n    } else if (average < 0.35) {\r\n        return ':-/'\r\n    } else if (average < 0.45) {\r\n        return ':-|'\r\n    } else if (average < 0.55) {\r\n        return ':-|'\r\n    } else if (average < 0.65) {\r\n        return ':-|'\r\n    } else if (average < 0.75) {\r\n        return ':-)'\r\n    } else if (average < 0.85) {\r\n        return ';-)'\r\n    } else if (average < 0.95) {\r\n        return ':-D'\r\n    } else {\r\n        return ';-D'\r\n    }\r\n}\r\n\r\nfunction getFlavor(data, timerInt) {\r\n    if (!data) return `There doesn't seem to be any sentiment data... yet.`\r\n\r\n    const average =\r\n        ((data.positive.calculated * 10) / data.total -\r\n            (data.negative.calculated * 10) / data.total +\r\n            100) /\r\n        200\r\n\r\n    if (timerInt % 2) {\r\n        return `Your average rating is ${(average * 100).toFixed(2)}%.`\r\n    }\r\n\r\n    let newText = `Overall, your table is `\r\n    if (average < 0.05) {\r\n        newText += 'overwhelmingly negative'\r\n    } else if (average < 0.15) {\r\n        newText += 'very negative'\r\n    } else if (average < 0.25) {\r\n        newText += 'quite negative'\r\n    } else if (average < 0.35) {\r\n        newText += 'negative'\r\n    } else if (average < 0.45) {\r\n        newText += 'somewhat negative'\r\n    } else if (average < 0.55) {\r\n        newText += 'neutral'\r\n    } else if (average < 0.65) {\r\n        newText += 'somewhat positive'\r\n    } else if (average < 0.75) {\r\n        newText += 'positive'\r\n    } else if (average < 0.85) {\r\n        newText += 'quite positive'\r\n    } else if (average < 0.95) {\r\n        newText += 'very positive'\r\n    } else {\r\n        newText += 'overwhelmingly positive'\r\n    }\r\n    return newText + '.'\r\n}\r\n\r\nconst Chart = (props) => {\r\n    const data = props.data\r\n    let [hover, setHover] = React.useState(undefined)\r\n    let [flavorText, setFlavorText] = React.useState('')\r\n\r\n    let [timer, setTimer] = React.useState(0)\r\n    let [timerInt, setTimerInt] = React.useState(0)\r\n\r\n    const theme = React.useContext(ThemeContext)\r\n\r\n    function resetFlavorText() {\r\n        setHover(undefined)\r\n        setFlavorText('')\r\n        setTimer(\r\n            setInterval(() => {\r\n                setTimerInt((prev) => prev + 1)\r\n            }, 5000)\r\n        )\r\n    }\r\n\r\n    React.useEffect(resetFlavorText, [])\r\n\r\n    function createFlavorText(type) {\r\n        setHover(type)\r\n        clearTimeout(timer)\r\n        if (!data) return setFlavorText(getFlavor(data))\r\n        let text = ''\r\n        switch (type) {\r\n            case 'positive':\r\n                text = `Out of ${\r\n                    data.total\r\n                } entries, ${data.positive.percent.toFixed(2)}% were positive.`\r\n                if (data.positive.percent > 50) text += ' Great job!'\r\n                break\r\n            case 'neutral':\r\n                text = `Out of ${\r\n                    data.total\r\n                } entries, ${data.neutral.percent.toFixed(2)}% were neutral.`\r\n                break\r\n            case 'negative':\r\n                text = `Out of ${\r\n                    data.total\r\n                } entries, ${data.negative.percent.toFixed(2)}% were negative.`\r\n                break\r\n        }\r\n        setFlavorText(text)\r\n    }\r\n\r\n    return (\r\n        <Container size={props.size} theme={theme}>\r\n            <ChartTitle>{props.title}</ChartTitle>\r\n            <PieChart size={props.size}>\r\n                {/* https://medium.com/@heyoka/scratch-made-svg-donut-pie-charts-in-html5-2c587e935d72 */}\r\n                <svg\r\n                    width={props.size * 0.66 + 'px'}\r\n                    height={props.size * 0.66 + 'px'}\r\n                    viewBox=\"0 0 42 42\"\r\n                    className=\"donut\"\r\n                >\r\n                    <circle\r\n                        className=\"donut-hole\"\r\n                        cx=\"21\"\r\n                        cy=\"21\"\r\n                        r=\"15.91549430918954\"\r\n                        fill={theme.background}\r\n                    />\r\n\r\n                    <circle\r\n                        onMouseEnter={() => createFlavorText('positive')}\r\n                        onMouseLeave={resetFlavorText}\r\n                        pointerEvents=\"visibleStroke\"\r\n                        className=\"donut-segment\"\r\n                        cx=\"21\"\r\n                        cy=\"21\"\r\n                        r=\"15.91549430918954\"\r\n                        fill=\"transparent\"\r\n                        stroke={theme.green}\r\n                        strokeWidth={hover === 'positive' ? 4 : 3}\r\n                        strokeDasharray={\r\n                            data &&\r\n                            (data.positive.calculated * 10) / data.total +\r\n                                ' ' +\r\n                                (100 -\r\n                                    (data.positive.calculated * 10) /\r\n                                        data.total)\r\n                        }\r\n                        strokeDashoffset=\"25\"\r\n                    />\r\n\r\n                    <circle\r\n                        onMouseEnter={() => createFlavorText('neutral')}\r\n                        onMouseLeave={resetFlavorText}\r\n                        pointerEvents=\"visibleStroke\"\r\n                        className=\"donut-segment\"\r\n                        cx=\"21\"\r\n                        cy=\"21\"\r\n                        r=\"15.91549430918954\"\r\n                        fill=\"transparent\"\r\n                        stroke={theme.yellow}\r\n                        strokeWidth={hover === 'neutral' ? 4 : 3}\r\n                        strokeDasharray={\r\n                            data &&\r\n                            (data.neutral.calculated * 10) / data.total +\r\n                                ' ' +\r\n                                (100 -\r\n                                    (data.neutral.calculated * 10) / data.total)\r\n                        }\r\n                        strokeDashoffset={\r\n                            data &&\r\n                            100 -\r\n                                (data.positive.calculated * 10) / data.total +\r\n                                25\r\n                        }\r\n                    />\r\n\r\n                    <circle\r\n                        onMouseEnter={() => createFlavorText('negative')}\r\n                        onMouseLeave={resetFlavorText}\r\n                        pointerEvents=\"visibleStroke\"\r\n                        className=\"donut-segment\"\r\n                        cx=\"21\"\r\n                        cy=\"21\"\r\n                        r=\"15.91549430918954\"\r\n                        fill=\"transparent\"\r\n                        stroke={theme.red}\r\n                        strokeWidth={hover === 'negative' ? 4 : 3}\r\n                        strokeDasharray={\r\n                            data &&\r\n                            (data.negative.calculated * 10) / data.total +\r\n                                ' ' +\r\n                                (100 -\r\n                                    (data.negative.calculated * 10) /\r\n                                        data.total)\r\n                        }\r\n                        strokeDashoffset={\r\n                            data &&\r\n                            100 -\r\n                                (data.positive.calculated * 10) / data.total -\r\n                                (data.neutral.calculated * 10) / data.total +\r\n                                25\r\n                        }\r\n                    />\r\n\r\n                    <g className=\"chart-text\">\r\n                        <text\r\n                            x=\"50%\"\r\n                            y=\"50%\"\r\n                            className=\"chart-number\"\r\n                            dy={data ? '0,0,0.75' : '0,0,1.25'}\r\n                            dx=\"0.5,0.5,0.66\"\r\n                            fill={theme.color}\r\n                        >\r\n                            {getCenter(data)}\r\n                        </text>\r\n                    </g>\r\n                </svg>\r\n            </PieChart>\r\n            <FlavorText text={flavorText || getFlavor(data, timerInt)} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import mondaySdk from 'monday-sdk-js'\n\nconst monday = mondaySdk()\n\nexport function showError(e) {\n    monday.execute('error', e)\n}\n\n// There is currently no way to remove listeners\n// thank you monday, very cool\n\nexport function onSettingsChange(cb, dataChange) {\n    monday.listen('settings', (res) => {\n        cb(res.data)\n        if (dataChange) onDataChange(dataChange)\n    })\n}\n\nexport function onBoardChange(titleChange, dataChange) {\n    monday.listen('context', async ({ data }) => {\n        if (data.boardIds.length === 0) {\n            titleChange(null)\n            dataChange(undefined)\n            return\n        }\n        id = data.boardIds[0]\n        // let query = `query { boards( ids: ${id} ) { name } }`\n        let query = `query { boards(ids: ${id}) {name}}`\n        const board = await monday.api(query)\n        const name = board.data.boards[0].name\n        titleChange(name)\n\n        onDataChange(dataChange)\n    })\n}\n\nlet column = { maxEntries: 25 }\nlet id = ''\n\nexport function setSentimentColumn(e) {\n    column = e\n}\n\nexport function getSentimentColumn() {\n    return column\n}\n\nfunction integrateRight(min, max, a) {\n    // 18d2 + (-36a+60)d\n    const j = Math.max(min, a)\n    const z = Math.min(max, a + 10 / 6)\n\n    if (a + 10 / 6 < min) return 0\n\n    const calc = (d) => -18 * d * d + d * (36 * a + 60)\n    let res = calc(z) - calc(j)\n    res = res < 0 ? 0 : res\n    return res / 10\n}\n\nfunction integrateLeft(min, max, a) {\n    // 18d2 + (-36a+60)d\n    const j = Math.max(min, a - 10 / 6)\n    const z = Math.min(max, a)\n\n    if (a - 10 / 6 > max) {\n        return 0\n    }\n    const calc = (d) => 18 * d * d + 60 * d - 36 * a * d\n    let res = calc(z) - calc(j)\n    res = res < 0 ? 0 : res\n    return res / 10\n}\n\nfunction calculate(sentiment) {\n    sentiment = Number.parseFloat(sentiment)\n    const a = (20 * sentiment) / 3 + 10 / 6\n\n    let [positive, neutral, negative] = [0, 0, 0]\n\n    // positive\n    positive = integrateLeft(0, 10 / 3, a) + integrateRight(0, 10 / 3, a)\n\n    // neutral\n    neutral =\n        integrateLeft(10 / 3, 20 / 3, a) + integrateRight(10 / 3, 20 / 3, a)\n\n    // negative\n    negative = integrateLeft(20 / 3, 10, a) + integrateRight(20 / 3, 10, a)\n\n    let res = {\n        sentiment,\n        positive,\n        neutral,\n        negative,\n    }\n    return res\n}\n\nasync function onDataChange(cb) {\n    const query = `query{boards(ids:${id}){items(limit:${column.maxEntries}){column_values{id,value}}}}`\n    const boardData = await monday.api(query)\n    const items = boardData.data.boards[0].items\n\n    let colValues = items.map((i) => i.column_values)\n    if (colValues.length <= 1) return cb(undefined)\n    colValues = colValues.slice(1) // remove first item, contains col names\n\n    let columnIndex = -1\n    for (let i = 0; i < colValues[0].length; i++) {\n        if (colValues) {\n            if (colValues[0][i].id === column.column) {\n                columnIndex = i\n                break\n            }\n        }\n    }\n    if (columnIndex === -1) return cb(undefined)\n    let values = []\n    for (let i = 0; i < colValues.length; i++) {\n        if (colValues[i][columnIndex])\n            values.push(colValues[i][columnIndex].value.replace(/[^\\d.-]/g, ''))\n    }\n\n    let final = {\n        total: values.length,\n        positive: {\n            total: 0,\n            calculated: 0,\n        },\n        neutral: {\n            total: 0,\n            calculated: 0,\n        },\n        negative: {\n            total: 0,\n            calculated: 0,\n        },\n    }\n\n    for (let value of values) {\n        const calculated = calculate(value)\n        // console.log(calculated)\n\n        final.negative.calculated += calculated.negative\n        final.neutral.calculated += calculated.neutral\n        final.positive.calculated += calculated.positive\n\n        if (value > 2 / 3) {\n            final.negative.total = final.negative.total + 1\n        } else if (value > 1 / 3) {\n            final.neutral.total = final.neutral.total + 1\n        } else {\n            final.positive.total = final.positive.total + 1\n        }\n    }\n\n    final.positive.percent = (final.positive.total / final.total) * 100\n    final.neutral.percent = (final.neutral.total / final.total) * 100\n    final.negative.percent = (final.negative.total / final.total) * 100\n\n    // console.log(final)\n    cb(final)\n}\n\nexport function onDataAdd(setData) {\n    monday.listen('events', (e) => {\n        const boardId = e.data.boardId\n        if (boardId === id) {\n            onDataChange(setData)\n            console.log(e)\n        }\n    })\n}\n","import React from 'react'\nimport Chart from './Chart'\nimport { themes, ThemeContext } from './Themes.js'\nimport styled from 'styled-components'\nimport {\n    onSettingsChange,\n    onBoardChange,\n    setSentimentColumn,\n    showError,\n    onDataAdd,\n    getSentimentColumn,\n} from './Monday'\n\nconst Container = styled.div`\n    display: flex;\n    height: inherit;\n    justify-content: center;\n    align-items: center;\n`\n\nconst App = () => {\n    const [chartSize, setChartSize] = React.useState(window.innerHeight)\n    const [boardTitle, setBoardTitle] = React.useState('Title')\n    const [theme, setTheme] = React.useState(themes.light)\n\n    const [data, setData] = React.useState()\n\n    React.useEffect(() => {\n        onSettingsChange((settings) => {\n            if (Object.keys(settings.sentimentColumn).length) {\n                if (settings.maxEntries && settings.maxEntries > 5000) {\n                    showError('Please enter a lower number of entries to show.')\n                    setSentimentColumn({\n                        column: Object.values(settings.sentimentColumn)[0][0],\n                        maxEntries: getSentimentColumn().maxEntries,\n                    })\n                }\n                setSentimentColumn({\n                    column: Object.values(settings.sentimentColumn)[0][0],\n                    maxEntries: settings.maxEntries,\n                })\n            }\n\n            if (settings.theme === 'light') {\n                if (settings.colorblind) setTheme(themes.colorblind)\n                else setTheme(themes.light)\n            } else {\n                if (settings.colorblind) setTheme(themes.colorblindDark)\n                else setTheme(themes.dark)\n            }\n        }, setData)\n        onDataAdd(setData)\n        onBoardChange(setBoardTitle, setData)\n    }, [])\n\n    React.useEffect(() => {\n        let listener = () => {\n            if (window.innerHeight > window.innerWidth) {\n                setChartSize(window.innerWidth)\n            } else {\n                setChartSize(window.innerHeight)\n            }\n        }\n        window.addEventListener('resize', listener)\n        return () => window.removeEventListener('resize', listener)\n    })\n\n    return (\n        <ThemeContext.Provider value={theme}>\n            <Container style={{ background: theme.background }}>\n                <Chart data={data} size={chartSize} title={boardTitle} />\n            </Container>\n        </ThemeContext.Provider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}