{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jenny\\\\OneDrive\\\\Desktop\\\\Makers\\\\construction-helper-monday\\\\view2\\\\quickstart-react\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { scaleLinear, scaleBand } from 'd3-scale';\nimport XYAxis from './components/axis/xy-axis';\nimport Line from './components/line/line';\nimport { line, curveMonotoneX } from 'd3-shape';\nimport { extent } from 'd3-array';\nimport { transition } from 'd3-transition';\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.randomData = e => {\n      e.preventDefault();\n      this.setState(prevState => {\n        const data = prevState.data.map(d => ({\n          name: d.name,\n          value: Math.floor(Math.random() * 100 + 1)\n        }));\n        return {\n          data\n        };\n      });\n    };\n\n    this.state = {\n      settings: {},\n      name: \"\",\n      listitems: [\"List Item 1\", \"List Item 2\", \"List Item 3\"],\n      data: [{\n        name: 'Jan',\n        value: 30\n      }, {\n        name: 'Feb',\n        value: 10\n      }, {\n        name: 'Mar',\n        value: 50\n      }, {\n        name: 'Apr',\n        value: 20\n      }, {\n        name: 'May',\n        value: 80\n      }, {\n        name: 'Jun',\n        value: 30\n      }, {\n        name: 'July',\n        value: 0\n      }, {\n        name: 'Aug',\n        value: 20\n      }, {\n        name: 'Sep',\n        value: 100\n      }, {\n        name: 'Oct',\n        value: 55\n      }, {\n        name: 'Nov',\n        value: 60\n      }, {\n        name: 'Dec',\n        value: 80\n      }]\n    };\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n    });\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      console.log(res.data);\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items(limit:1) { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n      });\n    }); // {JSON.stringify(this.state.boardData, null, 2)}\n  }\n\n  returnLink() {\n    //return <form><input type=\"button\" value=\"Redirect Me\" onclick=\"Redirect\" /></form>;\n    return \"i\";\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    const parentWidth = 500;\n    const margins = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = parentWidth - margins.left - margins.right;\n    const height = 200 - margins.top - margins.bottom;\n    const ticks = 5;\n    const t = transition().duration(1000);\n    const xScale = scaleBand().domain(data.map(d => d.name)).rangeRound([0, width]).padding(0.1);\n    const yScale = scaleLinear().domain(extent(data, d => d.value)).range([height, 0]).nice();\n    const lineGenerator = line().x(d => xScale(d.name)).y(d => yScale(d.value)).curve(curveMonotoneX);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: this.state.settings.background\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.randomData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, \"Randomize data\"), /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"lineChartSvg\",\n      width: width + margins.left + margins.right,\n      height: height + margins.top + margins.bottom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${margins.left}, ${margins.top})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(XYAxis, Object.assign({\n      xScale,\n      yScale,\n      height,\n      ticks,\n      t\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      xScale: xScale,\n      yScale: yScale,\n      lineGenerator: lineGenerator,\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Jenny/OneDrive/Desktop/Makers/construction-helper-monday/view2/quickstart-react/src/App.js"],"names":["React","mondaySdk","scaleLinear","scaleBand","XYAxis","Line","line","curveMonotoneX","extent","transition","monday","App","Component","constructor","props","randomData","e","preventDefault","setState","prevState","data","map","d","name","value","Math","floor","random","state","settings","listitems","componentDidMount","listen","res","context","console","log","api","variables","boardIds","then","boardData","returnLink","render","parentWidth","margins","top","right","bottom","left","width","height","ticks","t","duration","xScale","domain","rangeRound","padding","yScale","range","nice","lineGenerator","x","y","curve","background"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport { scaleLinear, scaleBand } from 'd3-scale';\r\nimport XYAxis from './components/axis/xy-axis';\r\nimport Line from './components/line/line';\r\nimport { line, curveMonotoneX } from 'd3-shape';\r\nimport { extent } from 'd3-array';\r\nimport { transition } from 'd3-transition';\r\nconst monday = mondaySdk();\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Default state\r\n        this.state = {\r\n            settings: {},\r\n            name: \"\",\r\n            listitems: [\"List Item 1\", \"List Item 2\", \"List Item 3\"],\r\n            data: [\r\n                { name: 'Jan', value: 30 },\r\n                { name: 'Feb', value: 10 },\r\n                { name: 'Mar', value: 50 },\r\n                { name: 'Apr', value: 20 },\r\n                { name: 'May', value: 80 },\r\n                { name: 'Jun', value: 30 },\r\n                { name: 'July', value: 0 },\r\n                { name: 'Aug', value: 20 },\r\n                { name: 'Sep', value: 100 },\r\n                { name: 'Oct', value: 55 },\r\n                { name: 'Nov', value: 60 },\r\n                { name: 'Dec', value: 80 },\r\n            ],\r\n        };\r\n    }\r\n\r\n    randomData = (e) => {\r\n        e.preventDefault();\r\n        this.setState((prevState) => {\r\n            const data = prevState.data.map(d => ({\r\n                name: d.name,\r\n                value: Math.floor((Math.random() * 100) + 1)\r\n            }))\r\n            return {\r\n                data\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        monday.listen(\"settings\", res => {\r\n            this.setState({ settings: res.data });\r\n        });\r\n\r\n        monday.listen(\"context\", res => {\r\n            this.setState({ context: res.data });\r\n            console.log(res.data);\r\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items(limit:1) { name column_values { title text } } } }`,\r\n                { variables: { boardIds: this.state.context.boardIds } }\r\n            )\r\n                .then(res => {\r\n                    this.setState({ boardData: res.data });\r\n                });\r\n        })\r\n\r\n        // {JSON.stringify(this.state.boardData, null, 2)}\r\n    } \r\n \r\n\r\n   returnLink()\r\n   {\r\n       //return <form><input type=\"button\" value=\"Redirect Me\" onclick=\"Redirect\" /></form>;\r\n       return \"i\";\r\n   }\r\n\r\n    render() {\r\n        const { data } = this.state;\r\n        const parentWidth = 500;\r\n\r\n        const margins = {\r\n            top: 20,\r\n            right: 20,\r\n            bottom: 20,\r\n            left: 20,\r\n        };\r\n\r\n        const width = parentWidth - margins.left - margins.right;\r\n        const height = 200 - margins.top - margins.bottom;\r\n\r\n        const ticks = 5;\r\n        const t = transition().duration(1000);\r\n\r\n        const xScale = scaleBand()\r\n            .domain(data.map(d => d.name))\r\n            .rangeRound([0, width]).padding(0.1);\r\n\r\n        const yScale = scaleLinear()\r\n            .domain(extent(data, d => d.value))\r\n            .range([height, 0])\r\n            .nice();\r\n\r\n        const lineGenerator = line()\r\n            .x(d => xScale(d.name))\r\n            .y(d => yScale(d.value))\r\n            .curve(curveMonotoneX);\r\n        return (\r\n            <div style={{ background: (this.state.settings.background) }}>\r\n                <button onClick={this.randomData}>Randomize data</button>\r\n                <svg\r\n                    className=\"lineChartSvg\"\r\n                    width={width + margins.left + margins.right}\r\n                    height={height + margins.top + margins.bottom}\r\n                >\r\n                    <g transform={`translate(${margins.left}, ${margins.top})`}>\r\n                        <XYAxis {...{ xScale, yScale, height, ticks, t }} />\r\n                        <Line data={data} xScale={xScale} yScale={yScale} lineGenerator={lineGenerator} width={width} height={height} />\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}