{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jenny\\\\OneDrive\\\\Desktop\\\\Makers\\\\construction-helper-monday\\\\view2\\\\quickstart-react\\\\src\\\\LineChart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nconst Line = React.createClass({\n  displayName: \"Line\",\n  propTypes: {\n    path: React.PropTypes.string.isRequired,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.number\n  },\n\n  getDefaultProps() {\n    return {\n      stroke: 'blue',\n      fill: 'none',\n      strokeWidth: 3\n    };\n  },\n\n  render() {\n    let {\n      path,\n      stroke,\n      fill,\n      strokeWidth\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"path\", {\n      d: path,\n      fill: fill,\n      stroke: stroke,\n      strokeWidth: strokeWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    });\n  }\n\n});\nconst DataSeries = React.createClass({\n  displayName: \"DataSeries\",\n  propTypes: {\n    colors: React.PropTypes.func,\n    data: React.PropTypes.object,\n    interpolationType: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      data: {},\n      interpolationType: 'cardinal',\n      colors: 'red',\n      xScale: React.PropTypes.func,\n      yScale: React.PropTypes.func\n    };\n  },\n\n  render() {\n    let {\n      data,\n      colors,\n      xScale,\n      yScale,\n      interpolationType\n    } = this.props;\n    let line = d3.svg.line().interpolate(interpolationType).x(d => {\n      return xScale(d.x);\n    }).y(d => {\n      return yScale(d.y);\n    });\n    let lines = data.points.map((series, id) => {\n      return /*#__PURE__*/React.createElement(Line, {\n        path: line(series),\n        seriesName: series.name,\n        stroke: colors(id),\n        key: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, lines));\n  }\n\n});\nconst LineChart = React.createClass({\n  displayName: \"LineChart\",\n  propTypes: {\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    data: React.PropTypes.object.isRequired\n  },\n\n  getDefaultProps() {\n    return {\n      width: 600,\n      height: 300\n    };\n  },\n\n  render() {\n    let {\n      width,\n      height,\n      data\n    } = this.props;\n    let xScale = d3.scaleBand().domain(data.xValues).rangePoints([0, width]);\n    let yScale = d3.scaleLinear().range([height, 10]).domain([data.yMin, data.yMax]);\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DataSeries, {\n      xScale: xScale,\n      yScale: yScale,\n      data: data,\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }));\n  }\n\n});\nexport default LineChart;","map":{"version":3,"sources":["C:/Users/Jenny/OneDrive/Desktop/Makers/construction-helper-monday/view2/quickstart-react/src/LineChart.js"],"names":["React","Component","d3","Line","createClass","propTypes","path","PropTypes","string","isRequired","stroke","strokeWidth","number","getDefaultProps","fill","render","props","DataSeries","colors","func","data","object","interpolationType","xScale","yScale","line","svg","interpolate","x","d","y","lines","points","map","series","id","name","LineChart","width","height","scaleBand","domain","xValues","rangePoints","scaleLinear","range","yMin","yMax"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\n\r\n\r\nconst Line = React.createClass({\r\n\r\n    propTypes: {\r\n        path: React.PropTypes.string.isRequired,\r\n        stroke: React.PropTypes.string,\r\n        strokeWidth: React.PropTypes.number\r\n    },\r\n\r\n    getDefaultProps() {\r\n        return {\r\n            stroke: 'blue',\r\n            fill: 'none',\r\n            strokeWidth: 3\r\n        };\r\n    },\r\n\r\n    render() {\r\n        let { path, stroke, fill, strokeWidth } = this.props;\r\n        return (\r\n            <path\r\n                d={path}\r\n                fill={fill}\r\n                stroke={stroke}\r\n                strokeWidth={strokeWidth}\r\n            />\r\n        );\r\n    }\r\n\r\n});\r\n\r\nconst DataSeries = React.createClass({\r\n\r\n    propTypes: {\r\n        colors: React.PropTypes.func,\r\n        data: React.PropTypes.object,\r\n        interpolationType: React.PropTypes.string\r\n    },\r\n\r\n    getDefaultProps() {\r\n        return {\r\n            data: {},\r\n            interpolationType: 'cardinal',\r\n            colors: 'red',\r\n            xScale: React.PropTypes.func,\r\n            yScale: React.PropTypes.func\r\n        };\r\n    },\r\n\r\n    render() {\r\n        let { data, colors, xScale, yScale, interpolationType } = this.props;\r\n\r\n        let line = d3.svg.line()\r\n            .interpolate(interpolationType)\r\n            .x((d) => { return xScale(d.x); })\r\n            .y((d) => { return yScale(d.y); });\r\n\r\n        let lines = data.points.map((series, id) => {\r\n            return (\r\n                <Line\r\n                    path={line(series)}\r\n                    seriesName={series.name}\r\n                    stroke={colors(id)}\r\n                    key={id}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <g>\r\n                <g>{lines}</g>\r\n            </g>\r\n        );\r\n    }\r\n\r\n});\r\n\r\nconst LineChart = React.createClass({\r\n\r\n    propTypes: {\r\n        width: React.PropTypes.number,\r\n        height: React.PropTypes.number,\r\n        data: React.PropTypes.object.isRequired\r\n    },\r\n\r\n    getDefaultProps() {\r\n        return {\r\n            width: 600,\r\n            height: 300\r\n        }\r\n    },\r\n\r\n    render() {\r\n        let { width, height, data } = this.props;\r\n\r\n        let xScale = d3.scaleBand()\r\n            .domain(data.xValues)\r\n            .rangePoints([0, width]);\r\n\r\n        let yScale = d3.scaleLinear()\r\n            .range([height, 10])\r\n            .domain([data.yMin, data.yMax]);\r\n\r\n        return (\r\n            <svg width={width} height={height}>\r\n                <DataSeries\r\n                    xScale={xScale}\r\n                    yScale={yScale}\r\n                    data={data}\r\n                    width={width}\r\n                    height={height}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n});\r\n\r\nexport default LineChart;\r\n"]},"metadata":{},"sourceType":"module"}